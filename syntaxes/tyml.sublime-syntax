%YAML 1.2
---
name: Tyml
file_extensions: [tyml]
scope: source.tyml

# ---------------------------------------------------------------------------
#  Variables  ---------------------------------------------------------------
# ---------------------------------------------------------------------------
variables:
  ident: '[A-Za-z_][A-Za-z0-9_]*'
  number: '\d+'
  range_op: '\\.\\.(?:=|<)'   # ..=  ..<

# ---------------------------------------------------------------------------
#  Contexts  ----------------------------------------------------------------
# ---------------------------------------------------------------------------
contexts:
  # ==== entry ==============================================================
  main:
    - include: skp-line           # now parses comments at topâ€‘level

    # keyword-driven blocks --------------------------------------------------
    - match: '\btype\b'
      scope: keyword.declaration.type.tyml
      push: type-decl

    - match: '\benum\b'
      scope: keyword.declaration.enum.tyml
      push: enum-decl

    # inline struct member at top-level settings ----------------------------
    - match: '{{ident}}(?=\s*:)'  # setting name
      scope: variable.other.member.tyml
      push: value-decl

    # literals allowed freely (e.g. defaults)
    - include: literals

  # -----------------------------------------------------------------------
  #  Whitespace helpers  ---------------------------------------------------
  # -----------------------------------------------------------------------
  ws-inline:   # spaces / tabs only (NO newline)
    - match: '[ \t]+'
      scope: text.whitespace

  ws-line:     # full-line whitespace (includes newline)
    - match: '\s+'
      scope: text.whitespace

  # -----------------------------------------------------------------------
  #  Comments  -------------------------------------------------------------
  # -----------------------------------------------------------------------
  comment-doc:                       # place BEFORE comment-line
    - match: '///'
      scope: punctuation.definition.comment.tyml
      push: comment-doc-body

  comment-line:
    - match: '//'
      scope: punctuation.definition.comment.tyml
      push: comment-line-body

  comment-line-body:
    - meta_scope: comment.line.double-slash.tyml
    - match: '\n'
      pop: true

  comment-doc-body:
    - meta_scope: comment.line.documentation.tyml
    - match: '\n'
      pop: true

  # helper to consume spaces/tabs + comments (no newline)
  skp-inline:
    - include: ws-inline
    - include: comment-doc
    - include: comment-line

  # helper to consume any whitespace/comments (with newline)
  skp-line:
    - include: ws-line
    - include: comment-doc
    - include: comment-line

  # -----------------------------------------------------------------------
  #  type  -----------------------------------------------------------------
  # -----------------------------------------------------------------------
  type-decl:
    - include: skp-inline
    - match: '{{ident}}'
      scope: entity.name.type.tyml
      set: type-after-name

  type-after-name:
    - include: skp-inline
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      set: type-body

  type-body:
    - meta_scope: meta.block.type.tyml
    - include: object-elements

  # -----------------------------------------------------------------------
  #  enum  -----------------------------------------------------------------
  # -----------------------------------------------------------------------
  enum-decl:
    - include: skp-inline
    - match: '{{ident}}'
      scope: entity.name.type.enum.tyml
      set: enum-after-name

  enum-after-name:
    - include: skp-inline
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      set: enum-body

  enum-body:
    - meta_scope: meta.block.enum.tyml
    - include: skp-line

    - match: '"[^"\\]*(?:\\.[^"\\]*)*"'
      scope: string.quoted.double.enum.tyml

    - match: '}'
      scope: punctuation.section.block.end.tyml
      pop: true

  # -----------------------------------------------------------------------
  #  Property / Value / Attributes ----------------------------------------
  # -----------------------------------------------------------------------
  value-decl:
    - include: skp-inline
    - match: ':'
      scope: punctuation.separator.key-value.tyml
      set: type-and-rest

  # --- after ':' -----------------------------------------------------------
  type-and-rest:
    - include: skp-inline

    # case 1 : explicit type name -----------------------------------------
    - match: '{{ident}}'
      scope: storage.type.tyml
      set: attr-or-default

    # case 2 : inline struct ----------------------------------------------
    - match: '{'
      scope: punctuation.section.block.begin.tyml
      push: inline-struct

    # newline / comma / } terminator --------------------------------------
    - match: '(?=,|\n|})'
      pop: true

  # --- inline struct context ---------------------------------------------
  inline-struct:
    - meta_scope: meta.block.inline-struct.tyml
    - include: object-elements
    - match: '}'
      scope: punctuation.section.block.end.tyml
      set: attr-or-default

  # --- attribute list or default value ------------------------------------
  attr-or-default:
    - include: skp-inline

    # attribute ------------------------------------------------------------
    - match: '@'
      scope: keyword.operator.attribute.tyml
      push: attribute

    # default value --------------------------------------------------------
    - match: '='
      scope: punctuation.separator.key-value.default.tyml
      set: default-value

    # end of declaration ---------------------------------------------------
    - match: '(?=,|\n|})'
      pop: true

  attribute:
    - include: skp-inline

    - match: '\b(in|length|regex)\b'
      scope: keyword.other.attribute.tyml

    - match: '{{range_op}}'
      scope: keyword.operator.range.tyml

    - include: literals

    # allow chaining multiple @ constraints or default assignment ---------
    - match: '(?=@|=|,|\n|})'
      pop: true

  default-value:
    - include: skp-inline
    - include: literals
    - match: '(?=,|\n|})'
      pop: true

  # -----------------------------------------------------------------------
  #  Inline struct / object elements --------------------------------------
  # -----------------------------------------------------------------------
  object-elements:
    - include: skp-line

    # member key -----------------------------------------------------------
    - match: '{{ident}}(?=\s*:)'  # ident followed by ':'
      scope: variable.other.member.tyml
      push: value-decl

    # comma delimiter ------------------------------------------------------
    - match: ','
      scope: punctuation.separator.comma.tyml

    # block end ------------------------------------------------------------
    - match: '}'
      scope: punctuation.section.block.end.tyml
      pop: true

  # -----------------------------------------------------------------------
  #  Literals --------------------------------------------------------------
  # -----------------------------------------------------------------------
  literals:
    - match: '"'
      scope: punctuation.definition.string.begin.tyml
      push: dq-string

    - match: '{{number}}'
      scope: constant.numeric.integer.tyml

  dq-string:
    - meta_scope: string.quoted.double.tyml
    - match: '"'
      scope: punctuation.definition.string.end.tyml
      pop: true
